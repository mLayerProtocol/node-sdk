import { isHexString } from "ethers";
import { BaseEntity } from "./base";
import { Utils } from "../helper";
import { ISignatureData, SignatureData } from "./authorization";
import { Address } from "./address";

type AddressString = string;
type HexString = string;

export interface ISubnet {
  // Primary
  id?: string; // id generated by node
  ref?: string; // optional custom reference
  meta?: string; // meta
  acct?: AddressString; // owner of subNetwork
  ts?: number; // timestamp in millisec
  sigD: ISignatureData; // signatureData

  // sig?: HexString;
  // hash?: HexString;
}

export class Subnet extends BaseEntity {
  public id: string = "";
  public reference: string = "";
  public meta: string = "";
  public account: Address = new Address();
  public timestamp: number = 0;
  public signatureData: SignatureData = new SignatureData("", "", "");

  /**
   * @override
   * @returns {ISubnet}
   */
  public asPayload(): ISubnet {
    return {
      id: this.id,
      ref: this.reference,
      meta: this.meta,
      sigD: this.signatureData.asPayload(),
      acct: this.account.toString(),
    };
  }

  /**
   * @override
   * @returns {Buffer}
   */
  public encodeBytes(): Buffer {
    return Utils.encodeBytes(
      { type: "string", value: this.meta },
      { type: "string", value: this.reference }
      // { type: "string", value: this.cats }
    );
  }
}
