import { isHexString } from "ethers";
import { BaseEntity } from "./base";
import { Utils } from "../helper";
import {
  AuthorizationPrivilege,
  ISignatureData,
  SignatureData,
} from './authorization';
import { Address } from './address';

type AddressString = string;
type HexString = string;

export interface ISubnet {
  // Primary
  id?: string; // id generated by node
  ref?: string; // optional custom reference
  meta?: string; // meta
  st?: number; // meta
  acct?: AddressString; // owner of subNetwork
  // cTopPriv?: AuthorizationPrivilege; // minimum privilege needed to create topics within the subnet
  dAuthPriv?: AuthorizationPrivilege; // default privilege assigned to anyone that joins subnet by authorizing an agent
  ts?: number; // timestamp in millisec
  sigD: ISignatureData; // signatureData
  own: AddressString;

  // sig?: HexString;
  // hash?: HexString;
}

export class Subnet extends BaseEntity {
  public id: string = '';
  public reference: string = '';
  public meta: string = '';
  public owner: Address = new Address();
  public account: Address = new Address();
  public status: number = 0;
  // public createTopicPrivilege: AuthorizationPrivilege = 0;
  public defaultAuthPrivilege: AuthorizationPrivilege = 0;
  public timestamp: number = 0;
  public signatureData: SignatureData = new SignatureData('', '', '');

  /**
   * @override
   * @returns {ISubnet}
   */
  public asPayload(): ISubnet {
    return {
      id: this.id,
      ref: this.reference,
      meta: this.meta,
      st: this.status,
      ts: this.timestamp,
      sigD: this.signatureData.asPayload(),
      acct: this.account.toString(),
      own: this.owner.toString(),
      // cTopPriv: this.createTopicPrivilege,
      dAuthPriv: this.defaultAuthPrivilege,
    };
  }

  /**
   * @override
   * @returns {Buffer}
   */
  public encodeBytes(): Buffer {
    if (Address.fromString(this.owner.toAddressString()).address == '') {
      this.owner = this.account;
    }
    return Utils.encodeBytes(
      // { type: 'int', value: this.createTopicPrivilege },
      { type: 'int', value: this.defaultAuthPrivilege },
      { type: 'string', value: this.meta },
      { type: 'string', value: this.owner.toAddressString() },
      { type: 'string', value: this.reference },
      { type: 'int', value: this.status },
      { type: 'int', value: this.timestamp }
    );
  }
}
