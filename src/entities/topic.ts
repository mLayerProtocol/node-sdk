import { isHexString } from "ethers";
import { BaseEntity } from "./base";
import { Utils } from "../helper";
import { Address } from './address';
import { SubscriberRole } from './subscription';

type AddressString = string;
type HexString = string;

export interface ITopic {
  // Primary
  id?: string; // id generated by node
  ref?: string; // optional custom reference
  // own: AddressString;
  pT?: string; // parent handle hash
  meta?: string; // description
  sC?: number; // subscription count
  acct?: AddressString; // owner of topic
  ts?: number; // timestamp in millisec
  pub: boolean; // is public topic
  rO: boolean;
  app: string; // app
  dSubRol: SubscriberRole;
  // sig?: HexString;
  // hash?: HexString;
}

export class Topic extends BaseEntity {
  public id: string = '';
  public ref: string = '';
  public meta: string = '';
  public parentTopic: string = '';
  public subsriberCount: number = 0;
  public account: Address = new Address();
  public timestamp: number = 0;
  public public: boolean = false;
  public readOnly: boolean = false;
  public app: string = '';
  public defaultSubscriberRole: SubscriberRole = 0;

  /**
   * @override
   * @returns {ITopic}
   */
  public asPayload(): ITopic {
    return {
      id: this.id,
      ref: this.ref,
      meta: this.meta,
      pT: this.parentTopic, // parent handle hash
      dSubRol: this.defaultSubscriberRole,
      // sC: this.subsriberCount, // subscription count
      // acct: this.account, // owner of topic
      // ts: this.timestamp, // timestamp in millisec
      pub: this.public, // is public topic
      rO: this.readOnly,
      app: this.app,
    };
  }
  /*
encoder.EncoderParam{Type: encoder.StringEncoderDataType, Value: topic.ID},
		encoder.EncoderParam{Type: encoder.StringEncoderDataType, Value: topic.Meta},
		encoder.EncoderParam{Type: encoder.HexEncoderDataType, Value: topic.ParentTopicHash},
		encoder.EncoderParam{Type: encoder.StringEncoderDataType, Value: topic.Owner},
		encoder.EncoderParam{Type: encoder.BoolEncoderDataType, Value: *topic.Public},
		encoder.EncoderParam{Type: encoder.StringEncoderDataType, Value: topic.Ref},
		encoder.EncoderParam{Type: encoder.BoolEncoderDataType, Value: *topic.ReadOnly},
		encoder.EncoderParam{Type: encoder.StringEncoderDataType, Value: topic.Application},
*/
  /**
   * @override
   * @returns {Buffer}
   */
  public encodeBytes(): Buffer {
    return Utils.encodeBytes(
      { type: 'int', value: this.defaultSubscriberRole },
      { type: 'byte', value: Utils.uuidToBytes(this.id) },
      { type: 'string', value: this.meta },
      { type: 'byte', value: Utils.uuidToBytes(this.parentTopic) },
      { type: 'boolean', value: this.public },
      { type: 'boolean', value: this.readOnly },
      { type: 'string', value: this.ref },
      { type: 'byte', value: Utils.uuidToBytes(this.app) }
    );
  }
}
