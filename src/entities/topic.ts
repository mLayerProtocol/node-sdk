import { isHexString } from "ethers";
import { BaseEntity } from "./base";
import { Utils } from "../helper";

type AddressString = string;
type HexString = string;

export interface ITopic {
  // Primary
  id?: string; // id generated by node
  ref?: string; // optional custom reference

  pTH?: string; // parent handle hash
  meta?: string; // description
  sC?: number; // subscription count
  acct?: AddressString; // owner of topic
  ts?: number; // timestamp in millisec
  pub: boolean; // is public topic
  rO: boolean;
  // sig?: HexString;
  // hash?: HexString;
}

export class Topic extends BaseEntity {
  public id: string = '';
  public ref: string = '';
  public meta: string = '';
  public parentTopicHash: string = '';
  public subsriberCount: number = 0;
  public account: string = '';
  public timestamp: number = 0;
  public isPublic: boolean = false;
  public readOnly: boolean = false;

  /**
   * @override
   * @returns {ITopic}
   */
  public asPayload(): ITopic {
    return {
      id: this.id,
      ref: this.ref,
      meta: this.meta,
      pTH: this.parentTopicHash, // parent handle hash
      // sC: this.subsriberCount, // subscription count
      // acct: this.account, // owner of topic
      // ts: this.timestamp, // timestamp in millisec
      pub: this.isPublic, // is public topic
      rO: this.readOnly,
    };
  }

  /**
   * @override
   * @returns {Buffer}
   */
  public encodeBytes(): Buffer {
    return Utils.encodeBytes(
      { type: 'string', value: this.id },
      { type: 'string', value: this.ref },
      { type: 'string', value: this.meta },
      { type: 'hex', value: this.parentTopicHash },
      // { type: 'int', value: this.subsriberCount },
      { type: 'boolean', value: this.isPublic },
      { type: 'boolean', value: this.readOnly }
    );
  }
}
